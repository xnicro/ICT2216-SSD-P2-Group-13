services:
  flask:
    build: 
      context: .
      dockerfile: FlaskApp.Dockerfile
    container_name: flask_app
    env_file:
      - .env
    expose:
      - 5000
    networks:
      - my_network
    volumes:
      - ./app:/app

  nginx:
    image: nginx:latest
    container_name: nginx_proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      #- ./nginx/cert.crt:/etc/nginx/conf.d/cert.crt
      #- ./nginx/cert.key:/etc/nginx/conf.d/cert.key
      - ./certbot/www:/var/www/certbot  # For ACME challenges
      - ./certbot/conf:/etc/letsencrypt  # Certificate storage

    depends_on:
      - flask
    networks:
      - my_network
  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
    networks:
      - my_network
    entrypoint: sh -c "certbot certonly --webroot -w /var/www/certbot --email 2302009@sit.singaporetech.edu.sg --agree-tos --no-eff-email --rsa-key-size 4096 --expand --force-renewal -d sitsecure2216.zapto.org -d sitsecure2216.zapto.org"
    #command: "certbot --nginx -d sitsecure2216p2.com"

  mysql:
    image: mysql:8.0
    container_name: mysql_db
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_ROOT_HOST: '%'  # This allows root access from any host, remove if uneeded
      MYSQL_DATABASE: flask_db
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - ./mysql_data:/var/lib/mysql #contains the local DB data
    ports:
    - "3307:3306" #Expose the port to access DB outside Docker
    networks:
      - my_network

networks:
  my_network:
    driver: bridge
    
