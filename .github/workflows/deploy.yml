name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

env:
  DOCKER_REGISTRY: docker.io
  IMAGE_NAME: flask-app

jobs:
  # Job 1: Run tests and lint
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt
          pip install pytest pytest-cov flake8

      - name: Run linting
        run: |
          flake8 app --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 app --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run tests
        run: |
          mkdir -p app/tests
          cat > app/tests/test_app.py << 'EOF'
          import pytest
          import sys, os
          sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

          def test_app_imports():
              try:
                  from app import app
                  assert app is not None
              except ImportError:
                  pytest.skip("App import test skipped due to missing deps")

          def test_allowed_extensions():
              from app import ALLOWED_EXTENSIONS
              assert 'png' in ALLOWED_EXTENSIONS
              assert 'jpg' in ALLOWED_EXTENSIONS
          EOF
          cd app && python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=term || true

  # Job 2: Build Docker image
  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: |
          docker build -f FlaskApp.Dockerfile -t $IMAGE_NAME:${{ github.sha }} .
          docker tag $IMAGE_NAME:${{ github.sha }} $IMAGE_NAME:latest
          docker save $IMAGE_NAME:latest -o flask-app.tar

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-images
          path: flask-app.tar

  # Job 3: Deploy to EC2
  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-images

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" >> ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Create .env file locally
        run: |
          cat > .env <<EOF
          # Database
          MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER=${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
          MYSQL_HOST=${{ secrets.MYSQL_HOST }}

          # Email
          SMTP_SERVER=${{ secrets.SMTP_SERVER }}
          SMTP_PORT=${{ secrets.SMTP_PORT }}
          SENDER_EMAIL=${{ secrets.SENDER_EMAIL }}
          SENDER_PASSWORD=${{ secrets.SENDER_PASSWORD }}
          APP_NAME=${{ secrets.APP_NAME }}

          # Graylog
          GRAYLOG_MONGO_PASSWORD=${{ secrets.GRAYLOG_MONGO_PASSWORD }}
          GRAYLOG_PASSWORD_SECRET=${{ secrets.GRAYLOG_PASSWORD_SECRET }}
          GRAYLOG_ROOT_PASSWORD_SHA2=${{ secrets.GRAYLOG_ROOT_PASSWORD_SHA2 }}
          GRAYLOG_HOST=${{ secrets.GRAYLOG_HOST }}
          GRAYLOG_PORT=${{ secrets.GRAYLOG_PORT }}
          EOF

      - name: Deploy on server
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'ENDSSH'
            cd ~/projects/ICT2216-SSD-P2-Group-13
            docker load < flask-app.tar
            docker-compose down || true
            docker-compose up -d --build
          ENDSSH

      - name: Health check main site
        run: |
          for i in {1..12}; do
            if curl -sSf https://wesitsecure.zapto.org/; then
              echo "✅ Main site is healthy!"
              break
            fi
            echo "Waiting for main site... (attempt $i)"
            sleep 5
          done

      - name: Health check Graylog
        run: |
          if curl -sSf https://wesitsecure.zapto.org/graylog; then
            echo "✅ Graylog is healthy!"
          else
            echo "❌ Graylog check failed"
            exit 1
          fi

      - name: Send notification
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deployment to https://wesitsecure.zapto.org/ succeeded"
          else
            echo "❌ Deployment failed!"
          fi

      - name: Cleanup
        if: always()
        run: |
          rm -f ~/.ssh/id_rsa .env flask-app.tar
